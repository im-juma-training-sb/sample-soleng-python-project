name: Sample Python GitHub
on: workflow_dispatch

permissions:
  actions: read
  id-token: write
  packages: write
  contents: read
  security-events: write

jobs:
  build-publish-python:
    runs-on: ubuntu-latest
    env:
      JF_DOCKER_REGISTRY: ${{ secrets.JF_DOCKER_REGISTRY }}        # ✅ Secret-based registry URL
      DOCKER_REPO: docker-prod-local-ja
      IMAGE_NAME: python-test-image-gh
    outputs:
      image: ${{ env.JF_DOCKER_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
      digest: ${{ steps.build.outputs.digest }}
    steps:

      # ✅ Setup JFrog CLI with OIDC
      - uses: jfrog/setup-jfrog-cli@v4
        name: Setup JFrog CLI
        id: setup-cli
        env:
          JF_URL: https://${{ vars.JF_URL }}
          JF_PROJECT: ${{ vars.JF_PROJECT }}
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          oidc-provider-name: ja-oidc-curation
          version: latest

      - name: Checkout the repository    
        uses: actions/checkout@v4

      # ✅ Configure pip to use your virtual PyPI repo
      - name: Configure JFrog pip environment
        run: |
          jf pip-config --repo-resolve=virtual-pypy-ja

      - name: Configure Python environment
        run: |                      
          python3 -m pip install --upgrade pip setuptools wheel sigstore
          pip show setuptools

      - name: Build project
        run: |                      
          jf pip install -r requirements.txt --module=jfrog-python-example
          python setup.py sdist bdist_wheel
          cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

      # ✅ Upload Python package to local repo (not virtual)
      - name: Publish Python package
        run: |
          jf rt u dist/ pypi-local-curation-ja/example-projects/ --module=jfrog-python-example

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3    

      # ✅ Secure Docker login using secret registry
      - name: Authenticate Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.JF_DOCKER_REGISTRY }}
          username: ${{ vars.JF_USER }}
          password: ${{ secrets.JF_ACCESS_TOKEN }}

      # ✅ Build & push Docker image
      - name: Build Docker image    
        uses: docker/build-push-action@v5
        id: build
        with:
          push: true
          platforms: linux/amd64
          tags: ${{ env.JF_DOCKER_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}

      # ✅ Docker scan with JFrog CLI
      - name: Docker scan
        run: |  
          jf docker pull ${{ env.JF_DOCKER_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
          jf docker scan ${{ env.JF_DOCKER_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}

      - name: Add Docker package to build
        run: |  
          echo "${{ env.JF_DOCKER_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" > metadata.json
          jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file metadata.json 

      - name: Publish build info
        run: |
          jf rt bce 
          jf rt bp

      - name: Build scan
        run: |
          jf build-scan --fail=false

  provenance:
    needs: [build-publish-python]
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.10.0
    with:
      image:  ${{ needs.build-publish-python.outputs.image }}
      digest: ${{ needs.build-publish-python.outputs.digest }}
      private-repository: true
    secrets:
      registry-username: ${{ vars.JF_USER }}
      registry-password: ${{ secrets.JF_ACCESS_TOKEN }}
